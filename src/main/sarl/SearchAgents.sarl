import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import java.util.UUID
import io.sarl.util.Scopes

/**
 * @author Vianney M
 * Agent's behavior and associated functions
 */

event OptimumLocalFound{
	var coordonneesx: int;
	var coordonneesy: int;
	var OptimumValue: int;
}

agent HolonBoss{
	uses DefaultContextInteractions, Logging

	var xOptimum : int
	var yOptimum : int
	var ValueOptimum : int
	
	on Initialize{
		info("The boss is awake")
		//spawn(ResearchAgent,x,y,ID)
		//va spawner les agents à des endroits définis ou non sur la map
		
	}
	on OptimumLocalFound{
		//on reception of a new optimum, the Holon checks if it is a global optimum:
		info("Optimum Local Found at x:"+occurrence.coordonneesx+", y:"+occurrence.coordonneesy+" and the value is:"+occurrence.OptimumValue)
		if (occurrence.OptimumValue>ValueOptimum){
			ValueOptimum = occurrence.OptimumValue
			xOptimum = occurrence.coordonneesx
			yOptimum = occurrence.coordonneesy
		}
	}
}

agent ResearchAgent{
	uses DefaultContextInteractions, Logging, InnerContextAccess, Lifecycle
	var x: int
	var y: int
	var adresseHolon : UUID
	var ValueFoundHere: int
	
	
	on Initialize{
		if(occurrence.parameters.isEmpty){
			info("Empty parameters")
		} else{
			x = Integer.parseInt(occurrence.parameters.get(0) as String)
			y = Integer.parseInt(occurrence.parameters.get(1) as String)
			adresseHolon = occurrence.parameters.get(2) as UUID
		}
		
		
		//TODO research function goes here
		
		//when a local optimum is found by the agent, he sends the message to his boss:
		emit(new OptimumLocalFound =>[coordonneesx = x; coordonneesy = y; OptimumValue = ValueFoundHere], Scopes.addresses(defaultSpace.getAddress(adresseHolon)))	
	}	
}